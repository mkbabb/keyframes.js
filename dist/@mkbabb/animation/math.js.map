{"version":3,"file":"math.js","sources":["../../../src/math.ts"],"sourcesContent":["export function clamp(x: number, lowerLimit: number, upperLimit: number): number {\n    if (x < lowerLimit) {\n        return lowerLimit;\n    } else if (x > upperLimit) {\n        return upperLimit;\n    }\n    return x;\n}\n\nexport function deCasteljau(t: number, points: number[]) {\n    const n = points.length - 1;\n    let b = [...points];\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = 0; j <= n - i; j++) {\n            b[j] = lerp(t, b[j], b[j + 1]);\n        }\n    }\n    return b[0];\n}\n\nexport function cubicBezier(t: number, x1: number, y1: number, x2: number, y2: number) {\n    return [deCasteljau(t, [0, x1, x2, 1]), deCasteljau(t, [0, y1, y2, 1])];\n}\n\nexport function easeInBounce(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    t = cubicBezier(t / duration, 0.09, 0.91, 0.5, 1.5)[1];\n    return distance * t + from;\n}\n\nexport function bounceInEase(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    t = cubicBezier(t / duration, 0.19, -0.53, 0.83, 0.67)[1];\n    return distance * t + from;\n}\n\nexport function easeInQuad(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    return distance * (t /= duration) * t + from;\n}\n\nexport function easeOutQuad(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    return -distance * (t /= duration) * (t - 2) + from;\n}\n\nexport function easeInOutQuad(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    if ((t /= duration / 2) < 1) return (distance / 2) * t * t + from;\n    return (-distance / 2) * (--t * (t - 2) - 1) + from;\n}\n\nexport function easeInCubic(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    return distance * (t /= duration) * t * t + from;\n}\n\nexport function easeOutCubic(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    return distance * ((t = t / duration - 1) * t * t + 1) + from;\n}\n\nexport function easeInOutCubic(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    if ((t /= duration / 2) < 1) return (distance / 2) * t * t * t + from;\n    return (distance / 2) * ((t -= 2) * t * t + 2) + from;\n}\n\nexport function smoothStep3(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    t /= duration;\n    return distance * Math.pow(t, 2) * (3 - 2 * t) + from;\n}\n\nexport function lerpIn(t: number, from: number, distance: number, duration: number) {\n    return distance * (t /= duration) + from;\n}\n\nexport function lerp(t: number, from: number, to: number) {\n    return (1 - t) * from + t * to;\n}\n\nexport function logerp(t: number, from: number, to: number) {\n    from = from === 0 ? 1e-9 : from;\n    const tt = from * Math.pow(to / from, t);\n    return tt;\n}\n\nexport function interpBezier(t: number, points: number[][]) {\n    const x = points.map((xy) => xy[0]);\n    const y = points.map((xy) => xy[1]);\n    return [deCasteljau(t, x), deCasteljau(t, y)];\n}\n\nexport function bounceInEaseHalf(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    const points = [\n        [0, 0],\n        [0.026, 1.746],\n        [0.633, 1.06],\n        [1, 0],\n    ];\n    t = interpBezier(t / duration, points)[1];\n    return distance * t + from;\n}\n"],"names":["clamp","x","lowerLimit","upperLimit","deCasteljau","t","points","n","b","i","j","lerp","cubicBezier","x1","y1","x2","y2","easeInBounce","from","distance","duration","bounceInEase","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","smoothStep3","lerpIn","to","logerp","interpBezier","xy","y","bounceInEaseHalf"],"mappings":"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"}