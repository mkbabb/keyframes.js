{"version":3,"file":"math.cjs","sources":["../../../src/math.ts"],"sourcesContent":["export function clamp(x: number, lowerLimit: number, upperLimit: number): number {\n    if (x < lowerLimit) {\n        return lowerLimit;\n    } else if (x > upperLimit) {\n        return upperLimit;\n    }\n    return x;\n}\n\nexport function deCasteljau(t: number, points: number[]) {\n    const n = points.length - 1;\n    let b = [...points];\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = 0; j <= n - i; j++) {\n            b[j] = lerp(t, b[j], b[j + 1]);\n        }\n    }\n    return b[0];\n}\n\nexport function cubicBezier(t: number, x1: number, y1: number, x2: number, y2: number) {\n    return [deCasteljau(t, [0, x1, x2, 1]), deCasteljau(t, [0, y1, y2, 1])];\n}\n\nexport function easeInBounce(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    t = cubicBezier(t / duration, 0.09, 0.91, 0.5, 1.5)[1];\n    return distance * t + from;\n}\n\nexport function bounceInEase(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    t = cubicBezier(t / duration, 0.19, -0.53, 0.83, 0.67)[1];\n    return distance * t + from;\n}\n\nexport function easeInQuad(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    return distance * (t /= duration) * t + from;\n}\n\nexport function easeOutQuad(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    return -distance * (t /= duration) * (t - 2) + from;\n}\n\nexport function easeInOutQuad(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    if ((t /= duration / 2) < 1) return (distance / 2) * t * t + from;\n    return (-distance / 2) * (--t * (t - 2) - 1) + from;\n}\n\nexport function easeInCubic(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    return distance * (t /= duration) * t * t + from;\n}\n\nexport function easeOutCubic(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    return distance * ((t = t / duration - 1) * t * t + 1) + from;\n}\n\nexport function easeInOutCubic(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    if ((t /= duration / 2) < 1) return (distance / 2) * t * t * t + from;\n    return (distance / 2) * ((t -= 2) * t * t + 2) + from;\n}\n\nexport function smoothStep3(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    t /= duration;\n    return distance * Math.pow(t, 2) * (3 - 2 * t) + from;\n}\n\nexport function lerpIn(t: number, from: number, distance: number, duration: number) {\n    return distance * (t /= duration) + from;\n}\n\nexport function lerp(t: number, from: number, to: number) {\n    return (1 - t) * from + t * to;\n}\n\nexport function logerp(t: number, from: number, to: number) {\n    from = from === 0 ? 1e-9 : from;\n    const tt = from * Math.pow(to / from, t);\n    return tt;\n}\n\nexport function interpBezier(t: number, points: number[][]) {\n    const x = points.map((xy) => xy[0]);\n    const y = points.map((xy) => xy[1]);\n    return [deCasteljau(t, x), deCasteljau(t, y)];\n}\n\nexport function bounceInEaseHalf(\n    t: number,\n    from: number,\n    distance: number,\n    duration: number\n) {\n    const points = [\n        [0, 0],\n        [0.026, 1.746],\n        [0.633, 1.06],\n        [1, 0],\n    ];\n    t = interpBezier(t / duration, points)[1];\n    return distance * t + from;\n}\n"],"names":["clamp","x","lowerLimit","upperLimit","deCasteljau","t","points","n","b","i","j","lerp","cubicBezier","x1","y1","x2","y2","easeInBounce","from","distance","duration","bounceInEase","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","smoothStep3","lerpIn","to","logerp","interpBezier","xy","y","bounceInEaseHalf"],"mappings":"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"}